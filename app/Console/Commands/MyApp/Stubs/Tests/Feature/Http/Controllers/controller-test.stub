<?php

namespace $NAMESPACE$;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;
use $MODEL_CLASS_NAMESPACE$\$MODEL_CLASS$;

class $CONTROLLER_TEST_CLASS$ extends TestCase
{
    use RefreshDatabase, WithFaker;

    public $itemColumn;
    public $itemUserColumn;
    public $itemAttributes;

    public function setUp(): void
    {
        parent::setUp();

        $this->setBaseRoute('$MODULE_ROUTE_NAME$$ROUTE_NAME$');
        $this->setBaseModel($MODEL_CLASS$::class);

        $attributes = [];

        $this->itemUserColumn = '$ITEM_USER_COLUMN$';
        $this->itemColumn = 'name';
        $this->itemAttributes = $attributes;
    }

    /** @test */
    public function guest_cannot_read_$MODEL_VARIABLE_PLURAL$()
    {
        $$MODEL_VARIABLE$ = create($this->base_model, $this->itemAttributes);

        $response = $this->readAllItems();

        $response->assertStatus(302);
        $response->assertRedirect('login');
        $response->assertDontSee($$MODEL_VARIABLE$->{$this->itemColumn});
    }


    /** @test */
    public function authenticated_user_can_read_all_their_$MODEL_VARIABLE_PLURAL$()
    {
        $this->signIn();
        $this->itemAttributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->readAllItems();

        $response->assertStatus(200);
        $response->assertViewIs('$VIEW_PATH$.index');
		$response->assertViewHas('$MODEL_VARIABLE_PLURAL$');
        $response->assertSee($$MODEL_VARIABLE$->{$this->itemColumn});
    }

    /** @test */
    public function authenticated_user_cannot_read_others_$MODEL_VARIABLE_PLURAL$()
    {
        $this->signIn();
        $otherUser = create(User::class);
        $this->itemAttributes[$this->itemUserColumn] = $otherUser->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->readAllItems();

        $response->assertStatus(200);
        $response->assertDontSee($$MODEL_VARIABLE$->{$this->itemColumn});
    }

    /** @test */
    public function guest_cannot_create_a_new_$MODEL_VARIABLE$()
    {
        $response = $this->visitCreatePage();

        $response->assertStatus(302);
        $response->assertRedirect('login');
    }

    /** @test */
    public function authenticated_user_can_create_a_new_$MODEL_VARIABLE$()
    {
        $this->signIn();

        $response = $this->visitCreatePage();

        $response->assertStatus(200);
        $response->assertViewIs('$VIEW_PATH$.create');
		$response->assertViewHas('$MODEL_VARIABLE$');

        $data = raw($this->base_model, $this->itemAttributes);
        unset($data[$this->itemUserColumn]);
        $response = $this->createItem($data);

        $model = new $this->base_model;
        $this->assertEquals(1, $model->all()->count());
        $this->assertDatabaseHas($model->getTable(), $data);

        // $response->assertSessionHas(['successMessage']);
        // $response->assertSessionHas('successMessage', __('my_app.messages.data_created'));

        $response->assertSessionHas(['flash_notification']);
        $session = session('flash_notification')[0];
        $this->assertEquals($session['message'], __('my_app.messages.data_created'));
        $response->assertStatus(302);
    }

    /** @test */
    public function guest_cannot_view_a_$MODEL_VARIABLE$()
    {
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->readItem($$MODEL_VARIABLE$->id);

        $response->assertStatus(302);
        $response->assertRedirect('login');
    }

    /** @test */
    public function authenticated_user_can_view_a_$MODEL_VARIABLE$()
    {
        $this->signIn();
        $this->itemAttributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->readItem($$MODEL_VARIABLE$->id);

        $response->assertStatus(200);
        $response->assertViewIs('$VIEW_PATH$.show');
		$response->assertViewHas('$MODEL_VARIABLE$');
    }

    /** @test */
    public function authenticated_user_cannot_view_others_$MODEL_VARIABLE$()
    {
        $this->signIn();
        $otherUser = create(User::class);
        $this->itemAttributes[$this->itemUserColumn] = $otherUser->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->readItem($$MODEL_VARIABLE$->id);

        $response->assertStatus(403);
    }

    /** @test */
    public function guest_cannot_update_the_$MODEL_VARIABLE$()
    {
        $$MODEL_VARIABLE$ = create($this->base_model, $this->itemAttributes);

        $response = $this->visitEditPage($$MODEL_VARIABLE$->id);

        $response->assertStatus(302);
        $response->assertRedirect('login');
    }

    /** @test */
    public function authorized_user_can_update_the_$MODEL_VARIABLE$()
    {
        $this->signIn();

        $this->itemAttributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);
        $oldName = $$MODEL_VARIABLE$->{$this->itemColumn};
        $newName = $this->faker->sentence;
        $$MODEL_VARIABLE$->{$this->itemColumn} = $newName;

        $response = $this->visitEditPage($$MODEL_VARIABLE$->id);

        $response->assertStatus(200);
        $response->assertViewIs('$VIEW_PATH$.edit');
		$response->assertViewHas('$MODEL_VARIABLE$');

        $response = $this->updateItem($$MODEL_VARIABLE$->id, $$MODEL_VARIABLE$->toArray());

        $model = new $this->base_model;
        $this->assertEquals(1, $model->all()->count());
        $this->assertDatabaseHas($model->getTable(), [
            $this->itemUserColumn => $this->user->id,
            $this->itemColumn => $newName,
        ]);
        $this->assertDatabaseMissing($model->getTable(), [
            $this->itemUserColumn => $this->user->id,
            $this->itemColumn => $oldName,
        ]);

        // $response->assertSessionHas(['successMessage']);
        // $response->assertSessionHas('successMessage', __('my_app.messages.data_updated'));

        $response->assertSessionHas(['flash_notification']);
        $session = session('flash_notification')[0];
        $this->assertEquals($session['message'], __('my_app.messages.data_updated'));
        $response->assertStatus(302);
    }

    /** @test */
    public function authorized_user_cannot_update_others_$MODEL_VARIABLE$()
    {
        $this->signIn();
        $otherUser = create(User::class);
        $this->itemAttributes[$this->itemUserColumn] = $otherUser->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);
        $newName = $this->faker->sentence;
        $$MODEL_VARIABLE$->{$this->itemColumn} = $newName;

        $response = $this->updateItem($$MODEL_VARIABLE$->id, $$MODEL_VARIABLE$->toArray());

        $response->assertStatus(403);
    }

    /** @test */
    public function authorized_user_can_delete_the_$MODEL_VARIABLE$()
    {
        $this->signIn();
        $this->itemAttributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->deleteItem($$MODEL_VARIABLE$->id);

        $model = new $this->base_model;
        $this->assertEquals(0, $model->all()->count());
        $this->assertDatabaseMissing($model->getTable(), [
            $this->itemUserColumn => $this->user->id,
            $this->itemColumn => $$MODEL_VARIABLE$->{$this->itemColumn},
        ]);

        // $response->assertSessionHas(['successMessage']);
        // $response->assertSessionHas('successMessage', __('my_app.messages.data_deleted'));

        $response->assertSessionHas(['flash_notification']);
        $session = session('flash_notification')[0];
        $this->assertEquals($session['message'], __('my_app.messages.data_deleted'));
        $response->assertStatus(302);
    }

    /** @test */
    public function authorized_user_cannot_delete_others_$MODEL_VARIABLE$()
    {
        $this->signIn();
        $otherUser = create(User::class);
        $this->itemAttributes[$this->itemUserColumn] = $otherUser->id;
        $$MODEL_VARIABLE$ = $this->newItem($this->itemAttributes);

        $response = $this->deleteItem($$MODEL_VARIABLE$->id);

        $model = new $this->base_model;
        $this->assertEquals(1, $model->all()->count());
        $this->assertDatabaseHas($model->getTable(), [
            $this->itemUserColumn => $otherUser->id,
            $this->itemColumn => $$MODEL_VARIABLE$->{$this->itemColumn},
        ]);
        $response->assertStatus(403);
    }
}
