<?php

namespace $NAMESPACE$;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;
use $MODEL_CLASS_NAMESPACE$\$MODEL_CLASS$;
use $SERVICE_CLASS_NAMESPACE$\$SERVICE_CLASS$;

class $SERVICE_TEST_CLASS$ extends TestCase
{
    use RefreshDatabase, WithFaker;

    public $itemColumn;
    public $itemUserColumn;
    public $itemAttributes;

    public function setUp(): void
    {
        parent::setUp();

        $this->setBaseRoute('$MODULE_ROUTE_NAME$$ROUTE_NAME$');
        $this->setBaseModel($MODEL_CLASS$::class);

        $attributes = [];

        $this->itemUserColumn = '$ITEM_USER_COLUMN$';
        $this->itemColumn = '$ITEM_COLUMN$';
        $this->itemAttributes = $attributes;
    }


    /** @test */
    public function it_can_fetch_users_$MODEL_VARIABLE_PLURAL$()
    {
        $service = new $SERVICE_CLASS$;
        $this->signIn();
        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($attributes);

        $$MODEL_VARIABLE_PLURAL$ = $service->getData();

        $$MODEL_VARIABLE_PLURAL$Array = $$MODEL_VARIABLE_PLURAL$->jsonSerialize();
        // $$MODEL_VARIABLE$->load('owner');
        $$MODEL_VARIABLE$Array = $$MODEL_VARIABLE$->toArray();
        // $this->assertContains($$MODEL_VARIABLE$Array, $$MODEL_VARIABLE_PLURAL$Array);
        // $this->assertArrayHasKey('owner', $$MODEL_VARIABLE_PLURAL$Array[0]);

        $this->assertCount(1, $$MODEL_VARIABLE_PLURAL$Array);
        $this->assertEquals($$MODEL_VARIABLE_PLURAL$Array[0][$this->itemUserColumn], $$MODEL_VARIABLE$Array[$this->itemUserColumn]);
        $this->assertEquals($$MODEL_VARIABLE_PLURAL$Array[0][$this->itemUserColumn], $this->user->id);
        $this->assertEquals($$MODEL_VARIABLE_PLURAL$Array[0][$this->itemColumn], $$MODEL_VARIABLE$Array[$this->itemColumn]);
    }

    /** @test */
    public function it_cannot_fetch_others_$MODEL_VARIABLE_PLURAL$()
    {
        $service = new $SERVICE_CLASS$;
        $this->signIn();
        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($attributes);
        // $$MODEL_VARIABLE$->load('owner');

        $attributes = $this->itemAttributes;
        $other$MODEL_VARIABLE$ = $this->newItem($attributes);

        $$MODEL_VARIABLE_PLURAL$ = $service->getData();

        $$MODEL_VARIABLE_PLURAL$Array = $$MODEL_VARIABLE_PLURAL$->jsonSerialize();
        $$MODEL_VARIABLE$Array = $$MODEL_VARIABLE$->toArray();
        $other$MODEL_VARIABLE$Array = $other$MODEL_VARIABLE$->toArray();

        $this->assertContains($$MODEL_VARIABLE$Array, $$MODEL_VARIABLE_PLURAL$Array);
        $this->assertNotContains($other$MODEL_VARIABLE$Array, $$MODEL_VARIABLE_PLURAL$Array);

        $this->assertCount(1, $$MODEL_VARIABLE_PLURAL$Array);
        $this->assertNotCount(2, $$MODEL_VARIABLE_PLURAL$Array);
    }

    /** @test */
    public function it_can_fetch_a_users_$MODEL_VARIABLE$()
    {
        $service = new $SERVICE_CLASS$;
        $this->signIn();
        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($attributes);
        // $$MODEL_VARIABLE$->load('owner');

        $item = $service->getItem($$MODEL_VARIABLE$->id);

        $$MODEL_VARIABLE$Array = $$MODEL_VARIABLE$->toArray();
        $this->assertEquals($item[$this->itemUserColumn], $$MODEL_VARIABLE$Array[$this->itemUserColumn]);
        $this->assertEquals($item[$this->itemUserColumn], $this->user->id);
        $this->assertEquals($item[$this->itemColumn], $$MODEL_VARIABLE$Array[$this->itemColumn]);
    }

    /** @test */
    public function it_can_create_$MODEL_VARIABLE$()
    {
        $service = new $SERVICE_CLASS$;
        $this->signIn();

        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $newName = $this->faker->sentence;
        $attributes[$this->itemColumn] = $newName;

        $data = make($this->base_model, $attributes);

        $$MODEL_VARIABLE$ = $service->create($data->toArray());

        $this->assertEquals($$MODEL_VARIABLE$[$this->itemUserColumn], $this->user->id);
        $this->assertEquals($$MODEL_VARIABLE$[$this->itemColumn], $newName);
        $model = new $this->base_model;
        $this->assertDatabaseHas($model->getTable(), [
            $this->itemUserColumn => $this->user->id,
            $this->itemColumn => $newName
        ]);
    }

    /** @test */
    public function it_can_update_$MODEL_VARIABLE$()
    {
        $service = new $SERVICE_CLASS$;
        $this->signIn();

        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($attributes);

        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $newName = $this->faker->sentence;
        $attributes[$this->itemColumn] = $newName;

        $data = make($this->base_model, $attributes);
        $oldName = $$MODEL_VARIABLE$->name;

        $$MODEL_VARIABLE$ = $service->update($$MODEL_VARIABLE$, $data->toArray());

        $this->assertNotEquals($$MODEL_VARIABLE$[$this->itemColumn], $oldName);
        $this->assertEquals($$MODEL_VARIABLE$[$this->itemColumn], $newName);
        $model = new $this->base_model;
        $this->assertDatabaseHas($model->getTable(), [
            $this->itemColumn => $newName
        ]);
        $this->assertDatabaseMissing($model->getTable(), [
            $this->itemColumn => $oldName
        ]);
    }

    /** @test */
    public function it_can_delete_$MODEL_VARIABLE$()
    {
        $model = new $this->base_model;
        $service = new $SERVICE_CLASS$;
        $this->signIn();

        $attributes = $this->itemAttributes;
        $attributes[$this->itemUserColumn] = $this->user->id;
        $$MODEL_VARIABLE$ = $this->newItem($attributes);
        $this->assertEquals(1, $model->all()->count());
        $oldName = $$MODEL_VARIABLE$->{$this->itemColumn};

        $service->delete($$MODEL_VARIABLE$);

        $this->assertEquals(0, $model->all()->count());
        $this->assertDatabaseMissing($model->getTable(), [
            $this->itemColumn => $oldName
        ]);
    }
}
